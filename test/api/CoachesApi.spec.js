/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.5.1
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.cfb);
  }
}(this, function(expect, cfb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new cfb.CoachesApi();
  });

  describe('(package)', function() {
    describe('CoachesApi', function() {
      describe('getCoaches', function() {
        it('should call getCoaches successfully', function(done) {
          // TODO: uncomment, update parameter values for getCoaches call and complete the assertions
          /*
          var opts = {};
          opts.firstName = "firstName_example";
          opts.lastName = "lastName_example";
          opts.team = "team_example";
          opts.year = 56;
          opts.minYear = 56;
          opts.maxYear = 56;

          instance.getCoaches(opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(cfb.Coach);
              expect(data.firstName).to.be.a('string');
              expect(data.firstName).to.be("");
              expect(data.lastName).to.be.a('string');
              expect(data.lastName).to.be("");
              expect(data.hireDate).to.be.a('string');
              expect(data.hireDate).to.be("");
              {
                let dataCtr = data.seasons;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(cfb.CoachSeasons);
                  expect(data.school).to.be.a('string');
                  expect(data.school).to.be("");
                  expect(data.year).to.be.a('string');
                  expect(data.year).to.be("");
                  expect(data.games).to.be.a('number');
                  expect(data.games).to.be(0);
                  expect(data.wins).to.be.a('number');
                  expect(data.wins).to.be(0);
                  expect(data.losses).to.be.a('number');
                  expect(data.losses).to.be(0);
                  expect(data.ties).to.be.a('number');
                  expect(data.ties).to.be(0);
                  expect(data.preseasonRank).to.be.a('number');
                  expect(data.preseasonRank).to.be(0);
                  expect(data.postseasonRank).to.be.a('number');
                  expect(data.postseasonRank).to.be(0);
                  expect(data.srs).to.be.a('number');
                  expect(data.srs).to.be();
                  expect(data.spOverall).to.be.a('number');
                  expect(data.spOverall).to.be();
                  expect(data.spOffense).to.be.a('number');
                  expect(data.spOffense).to.be();
                  expect(data.spDefense).to.be.a('number');
                  expect(data.spDefense).to.be();
  
                        }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
