/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * OpenAPI spec version: 4.1.8
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.cfb);
  }
}(this, function(expect, cfb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Recruit', function() {
      beforeEach(function() {
        instance = new cfb.Recruit();
      });

      it('should create an instance of Recruit', function() {
        // TODO: update the code to test Recruit
        expect(instance).to.be.a(cfb.Recruit);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property athleteId (base name: "athleteId")', function() {
        // TODO: update the code to test the property athleteId
        expect(instance).to.have.property('athleteId');
        // expect(instance.athleteId).to.be(expectedValueLiteral);
      });

      it('should have the property recruitType (base name: "recruitType")', function() {
        // TODO: update the code to test the property recruitType
        expect(instance).to.have.property('recruitType');
        // expect(instance.recruitType).to.be(expectedValueLiteral);
      });

      it('should have the property year (base name: "year")', function() {
        // TODO: update the code to test the property year
        expect(instance).to.have.property('year');
        // expect(instance.year).to.be(expectedValueLiteral);
      });

      it('should have the property ranking (base name: "ranking")', function() {
        // TODO: update the code to test the property ranking
        expect(instance).to.have.property('ranking');
        // expect(instance.ranking).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property school (base name: "school")', function() {
        // TODO: update the code to test the property school
        expect(instance).to.have.property('school');
        // expect(instance.school).to.be(expectedValueLiteral);
      });

      it('should have the property committedTo (base name: "committedTo")', function() {
        // TODO: update the code to test the property committedTo
        expect(instance).to.have.property('committedTo');
        // expect(instance.committedTo).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property stars (base name: "stars")', function() {
        // TODO: update the code to test the property stars
        expect(instance).to.have.property('stars');
        // expect(instance.stars).to.be(expectedValueLiteral);
      });

      it('should have the property rating (base name: "rating")', function() {
        // TODO: update the code to test the property rating
        expect(instance).to.have.property('rating');
        // expect(instance.rating).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property stateProvince (base name: "stateProvince")', function() {
        // TODO: update the code to test the property stateProvince
        expect(instance).to.have.property('stateProvince');
        // expect(instance.stateProvince).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property hometownInfo (base name: "hometownInfo")', function() {
        // TODO: update the code to test the property hometownInfo
        expect(instance).to.have.property('hometownInfo');
        // expect(instance.hometownInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
